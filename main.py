# -*- coding: utf-8 -*-
"""T-SNE.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Ji4BCS1b7x6bj-udnWLOwfMAw8X-S8dI
"""

!pip install sentence-transformers

!pip install --upgrade prince

!pip install prince

from sklearn.datasets import fetch_20newsgroups
from sklearn.metrics.cluster import normalized_mutual_info_score, adjusted_rand_score
from sentence_transformers import SentenceTransformer
import numpy as np
import pandas as pd
from sklearn.base import BaseEstimator, ClusterMixin
from sklearn.model_selection import cross_val_score
from sklearn.metrics import make_scorer
import numpy as np
from sklearn.manifold import TSNE
from sklearn.metrics import accuracy_score
from sklearn.model_selection import StratifiedKFold

def dim_red(mat, p, method):
  if method == 'T-SNE' :
    model = TSNE(n_components=p)
    red_mat = model.fit_transform(mat)
  else:
        raise Exception("Please select one of the three methods : APC, T-SNE, UMAP")
  return red_mat

def clust(mat, k):
    np.array(mat)
    kmeans = KMeans(n_clusters=k)
    cluster_labels = kmeans.fit_predict(mat)
    return cluster_labels

    return pred

# import data
ng20 = fetch_20newsgroups(subset='test')
corpus = ng20.data[:2000]
labels = ng20.target[:2000]
k = len(set(labels))

# embedding
model = SentenceTransformer('paraphrase-MiniLM-L6-v2')
embeddings = model.encode(corpus)

method = 'T-SNE'
red_emb = dim_red(embeddings, 3, method)  # 3 dimensions for t-SNE

# Perform clustering
# Perform clustering
pred = clust(red_emb, k)


# Evaluate clustering results
nmi_score = normalized_mutual_info_score(pred, labels)
ari_score = adjusted_rand_score(pred, labels)
acc = accuracy_score(labels, pred)

print(f'Method :{method} \nNMI: {nmi_score:.2f} \nARI: {ari_score:.2f}\nAccuracy: {acc:.2f}\n')

# Perform t-SNE and clustering for each fold in the cross-validation
n_splits = 5  # You can adjust the number of splits
skf = StratifiedKFold(n_splits=n_splits, shuffle=True, random_state=42)

for fold, (train_index, test_index) in enumerate(skf.split(embeddings, labels)):
    X_train, X_test = embeddings[train_index], embeddings[test_index]
    y_train, y_test = labels[train_index], labels[test_index]

    method = 't-SNE'
    red_emb = dim_red(X_train, 3,method)  # 3 dimensions for t-SNE

    pred = clust(red_emb, k)

    # Evaluate clustering results
    nmi_score = normalized_mutual_info_score(pred, y_train)
    ari_score = adjusted_rand_score(pred, y_train)
    acc = accuracy_score(y_train, pred)
    print(f'Method :{method} ')
    print(f'Fold: {fold+1}')
    print(f'\nNMI: {nmi_score:.2f} \nARI: {ari_score:.2f}\nAccuracy: {acc:.2f}\n')